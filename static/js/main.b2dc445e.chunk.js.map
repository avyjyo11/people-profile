{"version":3,"sources":["components/PeopleList.js","components/Profile.js","components/App.js","serviceWorker.js","index.js"],"names":["PoepleList","state","peoples","fetch","then","res","json","data","setState","map","el","firstName","lastName","profileImage","props","getData","className","this","index","key","style","display","onClick","viewProfile","bind","src","alt","Component","Profile","pressingBack","backPressed","setTimeout","getStyle","height","window","innerHeight","animationName","animationDuration","email","address","city","country","zipCode","countryCode","streetAddress","EnhancedPeopleList","console","log","backPress","viewedIndex","withView","PeopleList","title","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2dc445e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../styles/PeopleList.css\";\r\n\r\nclass PoepleList extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      peoples: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"https://mock-io.herokuapp.com/users\";\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({\r\n          peoples: data.map(el => {\r\n            return {\r\n              firstName: el.firstName,\r\n              lastName: el.lastName,\r\n              profileImage: el.profileImage\r\n            };\r\n          })\r\n        });\r\n        this.props.getData(data);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"people-list\">\r\n        <ul>\r\n          {this.state.peoples.map((el, index) => (\r\n            <li key={index} style={{display: \"flex\"}} onClick={this.props.viewProfile.bind(this, index)}>\r\n              <figure className=\"people-img\"><img src={el.profileImage} alt='img'/></figure> \r\n              <span className=\"people-name\">{el.firstName} {el.lastName}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PoepleList;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Profile.css\";\r\n\r\nclass Profile extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      backPressed: false\r\n    }\r\n  }\r\n  pressingBack = () => {\r\n    this.setState({\r\n      backPressed: true\r\n    });\r\n    setTimeout(this.props.backPressed, 1000);\r\n  };\r\n\r\n  getStyle = () => {\r\n    if(!this.state.backPressed) {\r\n      return {\r\n        height: window.innerHeight,\r\n        animationName: \"example1\",\r\n        animationDuration: \"1s\",\r\n      }\r\n    } else {\r\n      return {\r\n        height: window.innerHeight,\r\n        animationName: \"example2\",\r\n        animationDuration: \"1s\"\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n    return (\r\n      <div className=\"profile-div\" style={this.getStyle()} >\r\n        <div className=\"profile-header\">\r\n          <div>\r\n            <button onClick={this.pressingBack}>{\"<\"}</button>\r\n          </div>\r\n          <h2>View Profile</h2>\r\n        </div>\r\n        <div className=\"profile-img\">\r\n          <img src={data.profileImage} alt=\"profile-img\" />\r\n          <br />\r\n          {data.firstName} {data.lastName}\r\n        </div>\r\n        <div className=\"profile-data\">\r\n          <div className=\"profile-keys\">\r\n            <div>First Name</div>\r\n            <div>Last Name</div>\r\n            <div>Email</div>\r\n            <div>City</div>\r\n            <div>State</div>\r\n            <div>Country</div>\r\n            <div>Zip Code</div>\r\n            <div>Country Code</div>\r\n            <div>Street Address</div>\r\n          </div>\r\n          <div className=\"profile-values\">\r\n            <div>{data.firstName}</div>\r\n            <div>{data.lastName}</div>\r\n            <div>{data.email}</div>\r\n            <div>{data.address.city}</div>\r\n            <div>{data.address.state}</div>\r\n            <div>{data.address.country}</div>\r\n            <div>{data.address.zipCode}</div>\r\n            <div>{data.address.countryCode}</div>\r\n            <div>{data.address.streetAddress}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\nimport \"../styles/App.css\";\nimport \"../index.css\";\nimport PeopleList from \"./PeopleList\";\nimport Profile from \"./Profile\";\n\nfunction withHeaderFooter(Component) {\n  return function(props) {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h2>{props.title}</h2>\n          </div>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <Component {...props} />\n          </div>\n        </main>\n        <footer></footer>\n      </div>\n    );\n  };\n}\n\nfunction withView(Component) {\n  return function(props) {\n    console.log(props.backPress);\n    return (\n      <div>\n        <Component {...props} />\n        {props.viewedIndex === -1 || props.backPress === true ? (\n          <div></div>\n        ) : (\n          <Profile\n            data={props.data[props.viewedIndex]}\n            backPressed={props.backPressed}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nconst EnhancedPeopleList = withView(withHeaderFooter(PeopleList));\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      viewedIndex: -1,\n      backPress: true\n    };\n  }\n\n  getData = data => {\n    console.log(\"getting data\");\n    this.setState({\n      data: data\n    });\n    console.log(this.state);\n  };\n\n  viewProfile = index => {\n    this.setState({\n      viewedIndex: index,\n      backPress: false\n    });\n  };\n\n  backPressed = () => {\n    console.log(\"backPressed\");\n    this.setState({\n      backPress: true\n    });\n  };\n\n  render() {\n    return (\n      <EnhancedPeopleList\n        title=\"People\"\n        viewProfile={this.viewProfile}\n        getData={this.getData}\n        viewedIndex={this.state.viewedIndex}\n        data={this.state.data}\n        backPress={this.state.backPress}\n        backPressed={this.backPressed}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}